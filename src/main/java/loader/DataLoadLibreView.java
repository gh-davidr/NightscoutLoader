package loader;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

import control.MyLogger;
import entity.DBResult;
import entity.DBResultEntry;
import entity.DBResultEntryLibreView;
import entity.ResultFromDBComparator;
import utils.CommonUtils;

public class DataLoadLibreView extends DataLoadCSVFile 
{
	private static final Logger m_Logger = Logger.getLogger(MyLogger.class.getName());
	private static final String m_LibreViewSplitBy = ",";

	private static final String VARIABLE_STRING = "VARIES_BY_EXPORT_DO_NOT_COMPARE";

	private static final String LINE_1_HEADERS[] =
		{
				"Glucose Data",
				"Generated on",
				"VARIES_BY_EXPORT_DO_NOT_COMPARE",
				"Generated by",
				"VARIES_BY_EXPORT_DO_NOT_COMPARE",

		};

	private static final String LINE_2_HEADERS[] =
		{
				"Device",
				"Serial Number",
				"Device Timestamp",
				"Record Type",
				"Historic Glucose mmol/L",
				"Scan Glucose mmol/L",
				"Non-numeric Rapid-Acting Insulin",
				"Rapid-Acting Insulin (units)",
				"Non-numeric Food",
				"Carbohydrates (grams)",
				"Carbohydrates (servings)",
				"Non-numeric Long-Acting Insulin",
				"Long-Acting Insulin Value (units)",
				"Notes",
				"Strip Glucose mmol/L",
				"Ketone mmol/L",
				"Meal Insulin (units)",
				"Correction Insulin (units)",
				"User Change Insulin (units)",
		};

	public DataLoadLibreView()
	{
		m_SkipLines = 2;
		m_HeaderLine = 2;
	}

	static public Date parseFileDateTime(String date)
	{
		Date result = null;

		try {
			result = CommonUtils.convertDateString(date);
		} catch (ParseException e1) {
			m_Logger.log(Level.SEVERE, "<DataLoadLibreView> " + "parseFileDate - Unexpected error parsing date: " + date);
			
		}
		return result;
	}
	
	static public LocalDateTime parseFileLocalDateTime(String date)
	{
		LocalDateTime result = null;

		try {
			result = CommonUtils.convertLocalDateTimeString(date);
		} catch (ParseException e1) {
			m_Logger.log(Level.SEVERE, "<DataLoadLibreView> " + "parseFileLocalDateTime - Unexpected error parsing date: " + date);
			
		}
		return result;
	}
	
	
	@Override
	protected DBResult makeDBResult(String[] res) {
		return null;
	}

	@Override
	protected DBResultEntry makeDBResultEntry(String[] res)
	{
		DBResultEntry resultEntry = null;

		resultEntry = new DBResultEntryLibreView(res);

		return resultEntry;
	}

	@Override	
	protected void initializeHeaders(String[] res)
	{
		DBResultEntryLibreView.initializeCGMHeaders(res);
	}
	
	@Override	
	protected void resetCGMHeaders()
	{
		DBResultEntryLibreView.resetCGMHeaders();
	}

	@Override
	protected void orderRawResults()
	{
		Collections.sort(rawResultsFromDB, new ResultFromDBComparator(false));
	}

	@Override
	protected String loadStringName() 
	{
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected String getSplitBy() 
	{
		return m_LibreViewSplitBy;
	}

	public static boolean isLibreView(String fileName)
	{
		boolean result = true;  // Assume it is to start with
		BufferedReader br = null;
		String line = "";
		String cvsSplitBy = m_LibreViewSplitBy; 

		int ln = 0;
		int maxLines = 2; 

		try 
		{
			br = new BufferedReader(new FileReader(fileName));
			while (result && (ln <= maxLines) && (line = br.readLine()) != null) 
			{
				ln++;
				// use comma as separator
				String[] rs = line.split(cvsSplitBy);

				result = ln == 1 ? doesLineMatch(rs, LINE_1_HEADERS, VARIABLE_STRING) : result;
				result = ln == 2 ? doesLineMatch(rs, LINE_2_HEADERS, VARIABLE_STRING) : result;
			}

		} 
		catch (FileNotFoundException e) 
		{
			m_Logger.log(Level.SEVERE, "<DataLoadLibreView>" + "isLibreView: FileNotFoundException. File " + fileName + " Error " + e.getMessage());

			e.printStackTrace();
		} 
		catch (IOException e) 
		{
			m_Logger.log(Level.SEVERE, "<DataLoadLibreView>" + "isLibreView: IOException. File " + fileName + " Error " + e.getMessage());
			e.printStackTrace();
		} 
		finally 
		{
			if (br != null) 
			{
				try 
				{
					br.close();
				} 
				catch (IOException e) 
				{
					m_Logger.log(Level.SEVERE, "<DataLoadLibreView>" + "isLibreView: IOException closing file. File " + fileName + " Error " + e.getMessage());
					e.printStackTrace();
				}
			}
		}

		return result;
	}

}
